apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-git-files-changed
  namespace: tektonci
  annotations:
    description: |
      Succeeds if any of the files changed in the last N commits from the
      revision defined in the git resource matches the regular expression
spec:
  params:
    - name: gitCloneDepth
      description: Number of commits + 1
    - name: regex
      description: Regular expression to match files changed
  resources:
    - name: source
      type: git
  check:
    image: alpine/git
    script: |
      #!/bin/sh
      set -ex
      set -o pipefail

      BACK="HEAD~$(( $(params.gitCloneDepth) - 1 ))"

      cd $(resources.source.path)
      git diff-tree --no-commit-id --name-only -r HEAD $BACK | \
          grep -E '$(params.regex)'
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-name-matches
  namespace: tektonci
  annotations:
    description: |
      Succeeds if the name of the CI Job (GitHub Check) matches the regular
      expression specified. This is used for the "/test" command in GitHub.
      The regular expression cannot contain spaces.
spec:
  params:
    - name: gitHubCommand
      description: The whole comment left on GitHub
    - name: checkName
      description: The name of the check
  check:
    image: alpine
    script: |
      #!/bin/sh
      set -ex
      set -o pipefail

      # TODO(afrittoli) We might want to move this to an external script so
      # we can attach unit tests to it.

      # If no command was specified, the check is successful
      [[ "$(params.gitHubCommand)" == "" ]] && exit 0

      # If a command was specified, the regex should match the checkName
      REGEX="$(echo $(params.gitHubCommand) | awk '{ print $2}')"
      [[ "$REGEX" == "" ]] && REGEX='.*'
      echo "$(params.checkName)" | grep -E $REGEX
