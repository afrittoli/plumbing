apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: golang-lint
  namespace: tektonci
  description: |
    Lint golang source using golangci-lint
spec:
  params:
  - name: version
    description: golangci-lint version to use
    default: "v1.27.0"
  - name: flags
    description: flags to use for the golangci-lint run command
    default: --verbose
  - name: GOOS
    description: "running operating system target"
    default: linux
  - name: GOARCH
    description: "running architecture target"
    default: amd64
  - name: GO111MODULE
    description: "value of module support"
    default: auto
  resources:
    inputs:
      - name: source
        type: git
  steps:
  - name: lint
    image: golangci/golangci-lint:$(params.version)
    script: |
      #!/bin/sh
      set -ex
      cd /workspace/source/
      golangci-lint run $(params.flags)
    env:
    - name: GOPATH
      value: /workspace
    - name: GOOS
      value: "$(params.GOOS)"
    - name: GOARCH
      value: "$(params.GOARCH)"
    - name: GO111MODULE
      value: "$(params.GO111MODULE)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: yamllint
  namespace: tektonci
  description: |
    Lint yamls
spec:
  params:
  - name: folders
    description: The folders to lint with yamllint
  resources:
    inputs:
      - name: source
        type: git
  steps:
  - name: lint
    image: gcr.io/tekton-releases/dogfooding/yamllint:latest
    workingDir: $(resources.inputs.source.path)
    script: |
      #!/bin/sh
      set -ex
      yamllint $(params.folders)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-push-kaniko
  namespace: tektonci
  description: |
    CI Job that builds a container images and pushes it to a CR using kaniko
spec:
  params:
  - name: IMAGE
    description: Name (reference) of the image to build.
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    default: ""
  - name: BUILDER_IMAGE
    description: The image on which builds will run
    default: gcr.io/kaniko-project/executor:latest
  resources:
    inputs:
    - name: source
      type: git
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.

  steps:
  - name: build-and-push
    workingDir: /workspace/source
    image: $(params.BUILDER_IMAGE)
    # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
    # https://github.com/tektoncd/pipeline/pull/706
    env:
    - name: DOCKER_CONFIG
      value: /tekton/home/.docker
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/release.json
    command:
    - /kaniko/executor
    - $(params.EXTRA_ARGS)
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(resources.inputs.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.IMAGE)
    - --oci-layout-path=$(resources.inputs.source.path)/image-digest
    - --no-push
    securityContext:
      runAsUser: 0
    volumeMounts:
    - name: gcp-secret
      mountPath: /secret
  - name: write-digest
    workingDir: $(resources.inputs.source.path)
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.11.1
    # output of imagedigestexport [{"name":"image","digest":"sha256:eed29..660"}]
    command: ["/ko-app/imagedigestexporter"]
    args:
    - -images=[{"name":"$(params.IMAGE)","type":"image","url":"$(params.IMAGE)","digest":"","OutputImageDir":"$(resources.inputs.source.path)/image-digest"}]
    - -terminationMessagePath=image-digested
  - name: digest-to-results
    workingDir: $(resources.inputs.source.path)
    image: stedolan/jq
    script: |
      cat image-digested | jq '.[0].digest' | tee /tekton/results/IMAGE_DIGEST
  volumes:
  - name: gcp-secret
    secret:
      secretName: release-secret
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-kind-label
  namespace: tektonci
  description: |
    Verifies that a PR has one valid kind label
spec:
  params:
  - name: labels
    description: The labels attached to the Pull Request
  volumes:
  - name: label-config-v2
    configMap:
      name: label-config-v2
  steps:
  - name: install-pyyaml
    image: python:3-alpine
    script: |
      pip install pyyaml --user
  - name: check-labels
    image: python:3-alpine
    volumeMounts:
      - name: label-config-v2
        mountPath: /etc/config
    script: |
      #!/usr/bin/env python

      import json
      import yaml
      import sys

      prLabelsText = """$(params.labels)"""
      prLabels = json.loads(prLabelsText)

      availableLabels = None
      with open("/etc/config/labels.yaml", "r") as stream:
        availableLabels = yaml.safe_load(stream)["default"]["labels"]

      availableKindLabels = {x.get("name"):x.get("description") for x in availableLabels if x.get("name").startswith("kind/")}
      foundKindLabels = set([x.get("name") for x in prLabels if x.get("name").startswith("kind/") and x.get("name")])
      validKindLabels = set([x for x in foundKindLabels if x in availableKindLabels])

      # Check that we have one and only one kind label
      foundLabels = len(validKindLabels)
      if (foundLabels > 1 or foundLabels == 0):
        msg = "Error: {} valid \"kind/*\" labels found".format(foundLabels)
        if foundLabels > 1:
            msg += "({})".format(validKindLabels)
        msg += ", expecting exactly one."
        invalidKindLabels = foundKindLabels - validKindLabels
        if len(invalidKindLabels) > 0:
            msg += " Invalid labels found: {}".format(invalidKindLabels)
        print(msg)
        print("\nAvailable \"kind/*\" labels are:")
        for label, description in availableKindLabels.items():
          print("\t{}: {}".format(label, description))

        # Check failed. Return exit code 1.
        sys.exit(1)
      else:
        print("Exactly one \"kind/*\" label found: {}".format(validKindLabels))
---
apiVersion: custom.tekton.dev/v1alpha1
kind: TaskLoop
metadata:
  name: golang-tests
spec:
  iterateParam: context
  taskSpec:
    params:
    - name: package
      description: package (and its children) under test
      type: string
    - name: packages
      description: 'packages to test (default: ./...)'
      default: ./...
      type: string
    - name: context
      description: context to test
      default: ''
      type: string
    - name: version
      description: golang version to use for tests
      default: latest
      type: string
    - name: flags
      default: -race -cover -v
      description: flags to use for the test command
      type: string
    - name: GOOS
      default: linux
      description: running program's operating system target
      type: string
    - name: GOARCH
      default: amd64
      description: running program's architecture target
      type: string
    - name: GO111MODULE
      default: auto
      description: value of module support
      type: string
    resources:
      inputs:
      - name: source
        targetPath: src/$(inputs.params.package)
        type: git
    steps:
    - name: unit-test
      image: golang:$(inputs.params.version)
      env:
      - name: GOPATH
        value: /workspace
      - name: GOOS
        value: $(inputs.params.GOOS)
      - name: GOARCH
        value: $(inputs.params.GOARCH)
      - name: GO111MODULE
        value: $(inputs.params.GO111MODULE)
      resources: {}
      script: |
        go test $(inputs.params.flags) $(inputs.params.packages)
      workingDir: /workspace/src/$(inputs.params.package)/$(params.context)